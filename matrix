#!/bin/bash

###############################################################################
# Begin helper functions
#   dims() - lists dimentions of a given matrix
#   transpose() - transposes a given matrix
#   mean() - gives the mean of a given matrix
#   add() - adds two given matrices
#   multiply() - multiplies two given matrices
###############################################################################

dims(){
	#NAME
		# dims - lists dimensions of matrix
	#SYNOPSIS
		# outputs rows and columns of matrix
	#DESCRIPTION
		# after checking for valid input, rows then columns are printed
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX=$1
	USING_FILE=0
	### BEGIN INPUT CHECKING
	if [ -n "$2" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	elif [ -e "$MATRIX" ]; then # if file exits...
		USING_FILE=1
		if ! [ -f "$MATRIX" ] || ! [ -r "$MATRIX" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad File"
			exit 1	
		fi	
	elif ! [ -e "$MATRIX" ] && [ -n "$1" ]; then
		>&2 echo "ERROR: File Doesn't Exist"
		exit 1
	fi
	### END INPUT CHECKING
	if ! [ "$USING_FILE" -eq "1" ]; then # if not using a file...
		echo "$(</dev/stdin)" > temporaryfile12324 # moves stdin to temp file with unique name
		ROWS=($(wc --lines < "./temporaryfile12324")) # gets number of rows
		COLUMNS=$((($(wc --words < "./temporaryfile12324"))/ROWS)) # gets number of words/number of rows
		rm temporaryfile12324 # deletes tempfile
	else #if using a file
		ROWS=($(wc --lines < "$MATRIX")) # gets number of rows
		COLUMNS=$((($(wc --words < "$MATRIX"))/ROWS)) # gets number of words/number of rows	
	fi
	echo "$ROWS $COLUMNS" # prints final answer
	return 0
}

transpose(){
	#NAME
		# transpose - inverses matrix
	#SYNOPSIS
		# x changes to y and y to x
	#DESCRIPTION
		# The rows and columns will switch, the data will remain unchanged
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX=$1
	USING_FILE=0
	### BEGIN INPUT CHECKING
	if [ -n "$2" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	elif [ -e "$MATRIX" ]; then # if file exits...
		USING_FILE=1
		if ! [ -f "$MATRIX" ] || ! [ -r "$MATRIX" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad File"
			exit 1	
		fi	
	elif ! [ -e "$MATRIX" ] && [ -n "$1" ]; then
		>&2 echo "ERROR: File Doesn't Exist"
		exit 1
	fi
	### END INPUT CHECKING 
	if ! [ "$USING_FILE" -eq "1" ]; then # if not using a file...
		echo "$(</dev/stdin)" > temporaryfile12324 # moves stdin to temp file with unique name
		ROWS=($(wc --lines < "./temporaryfile12324")) # gets number of rows
		COLUMNS=$((($(wc --words < "./temporaryfile12324"))/ROWS)) # gets number of words/number of rows (gives columns)
		i=0 # Counter for columns
		j=0 # Counter for rows
		h=0 # array value
		read -d EOF -ra myarray < ./temporaryfile12324 # pushes contents from tempfile into array
		while [ $i -lt $COLUMNS ]; do # for columns
			while [ $j -lt $ROWS ]; do # for rows
				echo -ne "${myarray[$h]}" # print array[h]
				j=$((j+1))	# iterates
				h=$((h+COLUMNS)) # iterates in chunks by columns. ex: array[0], array[4], array[8]
				if ! [ $j = $((ROWS)) ]; then # if it's NOT the last one in a row
					echo -ne "\t" # tab
				fi		
			done
			j=0 # reset rows
			i=$((i+1)) # iterate columns
			h=$i # put h back on track with columns
			echo -ne "\n" # newline
		done		
		rm temporaryfile12324 # deletes temp file	
	else # if using a file...
		ROWS=($(wc --lines < "$MATRIX")) # gets number of rows
		COLUMNS=$((($(wc --words < "$MATRIX"))/ROWS)) # gets number of words/number of rows (gives columns)	
		i=0 # Counter for columns
		j=0 # Counter for rows
		h=0 # array value
		read -d EOF -ra myarray < $MATRIX # pushes contents from given file into array
		while [ $i -lt $COLUMNS ]; do #for columns
			while [ $j -lt $ROWS ]; do #for rows
				echo -ne "${myarray[$h]}"	#print array[i]
				j=$((j+1))	# iterates
				h=$((h+COLUMNS)) # iterates in chunks by columns. ex: array[0], array[4], array[8]
				if ! [ $j = $((ROWS)) ]; then # if it's NOT the last one in a row
					echo -ne "\t" # tab
				fi		
			done
			j=0 # reset rows
			i=$((i+1)) # iterate columns
			h=$i # put h back on track with columns
			echo -ne "\n" # newline
		done
	fi	
	return 0
}

mean(){
	#NAME
		# mean - finds average of matrix
	#SYNOPSIS
		# average in a matrix will be printed
	#DESCRIPTION
		# all numbers will be added then divided by the total input
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX=$1
	USING_FILE=0
	### BEGIN INPUT CHECKING
	if [ -n "$2" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	elif [ -e "$MATRIX" ]; then # if file exits...
		USING_FILE=1
		if ! [ -f "$MATRIX" ] || ! [ -r "$MATRIX" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad File"
			exit 1	
		fi	
	elif ! [ -e "$MATRIX" ] && [ -n "$1" ]; then
		>&2 echo "ERROR: File Doesn't Exist"
		exit 1
	fi
	### END INPUT CHECKING
	if ! [ "$USING_FILE" -eq "1" ]; then # if not using a file...
		echo "$(</dev/stdin)" > temporaryfile12324 # moves stdin to temp file with unique name
		ROWS=($(wc --lines < "./temporaryfile12324")) # gets number of rows
		COLUMNS=$((($(wc --words < "./temporaryfile12324"))/ROWS)) #gets number of words/number of rows
		i=0 # Counter for columns
		j=0 # Counter for rows
		h=0 # array value
		read -d EOF -ra myarray < ./temporaryfile12324 # pushes contents from tempfile into array
		while [ $i -lt $COLUMNS ]; do #for columns
			while [ $j -lt $ROWS ]; do #for rows
				arrayval=${myarray[$h]} # stores value for easier manipulation
				avg=$((avg+arrayval)) # adds onto average
				j=$((j+1)) # iterates
				h=$((h+COLUMNS)) # iterates in chunks	
			done
			j=0 # resets rows
			i=$((i+1)) # iterates columns
			h=$i # gets h back on track with columns
			if [ $avg -lt 0 ]; then	# if average is negative...
				avg=$((((avg-((ROWS/2))))/ROWS)) # find average with rounding for negatives
			elif [ $avg -gt 0 ]; then # if average is positive...
				avg=$((((avg+((ROWS/2))))/ROWS)) # find average with rounding for positives
			fi
			echo -n "$avg" 
			if ! [ $i = $COLUMNS ]; then # if it's NOT the last one...
				echo -ne "\t" # tab
			fi
			avg=0 # get avg ready for next average
		done
		#echo -ne "\n"	
		rm temporaryfile12324 # delete temp file
	else # if using a file...
		ROWS=($(wc --lines < "$MATRIX")) # gets number of rows
		COLUMNS=$((($(wc --words < "$MATRIX"))/ROWS)) #gets number of words/number of rows	
		i=0 # Counter for columns
		j=0 # Counter for rows
		h=0 # array value
		totalcount=0
		declare -a myarray
		read -d EOF -ra myarray < $MATRIX
		while [ $i -lt $COLUMNS ]; do #for columns
			while [ $j -lt $ROWS ]; do #for rows
				arrayval=${myarray[$h]} # stores value for easier manipulation
				avg=$((avg+arrayval)) # adds onto average
				j=$((j+1)) # iterates
				h=$((h+COLUMNS)) # iterates in chunks	
			done
			j=0 # resets rows
			i=$((i+1)) # iterates columns
			h=$i # gets h back on track with columns
			if [ $avg -lt 0 ]; then	# if average is negative...
				avg=$((((avg-((ROWS/2))))/ROWS)) # find average with rounding for negatives
			elif [ $avg -gt 0 ]; then # if average is positive...
				avg=$((((avg+((ROWS/2))))/ROWS)) # find average with rounding for positives
			fi
			echo -n "$avg" 
			if ! [ $i = $COLUMNS ]; then # if it's NOT the last one...
				echo -ne "\t" # tab
			fi
			avg=0 # get avg ready for next average
		done
		#echo -ne "\n"
	fi
	return 0
}

add(){
	#NAME
		# add - adds matrix
	#SYNOPSIS
		# 2 arrays will be added
	#DESCRIPTION
		# 2 arrays will be added if they are able to be
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX_LEFT=$1
	MATRIX_RIGHT=$2
	### BEGIN INPUT CHECKING
	if [ -z "$MATRIX_LEFT"  ] || [ -z "$MATRIX_RIGHT"  ] || [ -n "$3" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	fi
	if [ -e "$MATRIX_LEFT" ]; then # if file exits...
		if ! [ -f "$MATRIX_LEFT" ]  || ! [ -r "$MATRIX_LEFT" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad 1st File"
			exit 1	
		fi
	else 
		>&2 echo "ERROR: 1st File Doesn't Exist"
		exit 1		
	fi	
	if [ -e "$MATRIX_RIGHT" ]; then # if file exits...
		if ! [ -f "$MATRIX_RIGHT" ]  || ! [ -r "$MATRIX_RIGHT" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad 2nd File"
			exit 1
		fi
	else 
		>&2 echo "ERROR: 2nd File Doesn't Exist"
		exit 1				
	fi
	#make sure columns and rows are equal (dim1=dim2)
	ROWS_L=($(wc --lines < "$MATRIX_LEFT")) # gets number of rows
	COLUMNS_L=$((($(wc --words < "$MATRIX_LEFT"))/ROWS_L)) #gets number of words/number of rows
	ROWS_R=($(wc --lines < "$MATRIX_RIGHT")) # gets number of rows
	COLUMNS_R=$((($(wc --words < "$MATRIX_RIGHT"))/ROWS_R)) #gets number of words/number of rows
	
	if ! [ "$ROWS_L" -eq "$ROWS_R" ] || ! [ "$COLUMNS_L" -eq "$COLUMNS_R" ]; then # checks matrix rules
		>&2 echo "ERROR: Matrices Are Incompatible"
		exit 1
	fi
	### END INPUT CHECK
	read -d EOF -ra array1 < $MATRIX_LEFT # pulls in first command line arg
	read -d EOF -ra array2 < $MATRIX_RIGHT # pulls in second command line arg
	i=0 # counter for rows
	j=0 # counter for columns
	h=0 # all time counter for array values
	while [ $i -lt $ROWS_R ]; do #for rows
		while [ $j -lt $COLUMNS_R ]; do #for columns
			arrayval=$(((${array1[$h]}+${array2[$h]}))) # adds value file1[h] and file2[h]
			echo -ne "$arrayval" # prints
			j=$((j+1)) # iterate
			h=$((h+1)) # iterate
			if ! [ $j = $((COLUMNS_R)) ]; then # if NOT the last one...
				echo -ne "\t" #tab
			fi	
		done
		j=0 # reset
		i=$((i+1)) # iterate
		echo -ne "\n" #newline
	done
	return 0	
}

multiply(){
	#NAME
		# multiply - multiplies matrix
	#SYNOPSIS
		# 2 arrays will be multiplied
	#DESCRIPTION
		# 2 arrays will be multiplied if they are able to be.
		# The first one is converted to array, second one is as well.
		# The second one is transposed, giving it a better "shape" for the rest of the function.
		# The actual work of the function goes like this:
		# FOR NUMBER OF FIRST MATRIX ROWS {
			# FOR NUMBER OF SECOND MATRIX COLUMNS {
				# FOR NUMBER OF FIRST MATRIX COLUMNS OR SECOND MATRIX ROWS {
					# TEMP = (FIRST_MATRIX_ARRAY[i] * SECOND_MATRIX_ARRAY[j]) + TEMP
					# i++
					# j++
				# }
				# PRINT TEMP & TAB
				# i = 0
			# }
			# j = 0
			# PRINT NEW LINE
			# i = FIRST MATRIX COLUMNS + OLD i
		# }
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX_LEFT=$1
	MATRIX_RIGHT=$2
	### BEGIN INPUT CHECKING 
	if [ -z "$MATRIX_LEFT"  ] || [ -z "$MATRIX_RIGHT"  ] || [ -n "$3" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	fi
	if [ -e "$MATRIX_LEFT" ]; then # if file exits...
		if ! [ -f "$MATRIX_LEFT" ]   || ! [ -r "$MATRIX_LEFT" ]; then # and it's not regular or readable....
			>&2 echo "ERROR: Bad 1st File"
			exit 1	
		fi
	else 
		>&2 echo "ERROR: 1st File Doesn't Exist"
		exit 1		
	fi	
	if [ -e "$MATRIX_RIGHT" ]; then # if file exits...
		if ! [ -f "$MATRIX_RIGHT" ]  || ! [ -r "$MATRIX_RIGHT" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad 2nd File"
			exit 1
		fi
	else 
		>&2 echo "ERROR: 2nd File Doesn't Exist"
		exit 1				
	fi
	#make sure columns and rows are equal (dim1=dim2)
	ROWS_L=($(wc --lines < "$MATRIX_LEFT")) # gets number of rows
	COLUMNS_L=$((($(wc --words < "$MATRIX_LEFT"))/ROWS_L)) #gets number of words/number of rows (columns)
	ROWS_R=($(wc --lines < "$MATRIX_RIGHT")) # gets number of rows
	COLUMNS_R=$((($(wc --words < "$MATRIX_RIGHT"))/ROWS_R)) #gets number of words/number of rows (columns)
	if ! [ "$COLUMNS_L" -eq "$ROWS_R" ]; then
	 	>&2 echo "ERROR: Matrices Are Incompatible"
	 	exit 1
	fi
	### END INPUT CHECKING
	### TRANSPOSING ARRAY2 - this is done to make both arrays work in the same loops, iterating based on row/column differences  
	i=0 # counter for columns
	j=0 # counter for rows
	h=0 # array var
	totalcount=0 # gives total count of array
	read -d EOF -ra myarray < $MATRIX_RIGHT
	while [ $i -lt $COLUMNS_R ]; do # for columns
		while [ $j -lt $ROWS_R ]; do # for rows
			array2[$totalcount]="${myarray[$h]}" # fills new array correctly, same code as transpose but filling new array instead of printing
			j=$((j+1))
			h=$((h+COLUMNS_R))
			totalcount=$((totalcount+1))		
		done
		j=0
		i=$((i+1))
		h=$i
	done
	
	read -d EOF -ra array1 < $MATRIX_LEFT
	a=0 # iterate for First Matrix Rows (FMR)
	b=0 # iterate for Second Matrix Columns (SMC)
	c=0 # iterate for First Matrix Columns (same as Second Matrix Rows) (FMC)
	i=0 # var for First Matrix (FMV)
	h=0 # var for Second Matrix (SMV)
	default=0 # place holder for First Matrix Var. Holds value during clears/cycles.
	while [ $a -lt $ROWS_L ]; do # for left rows
		while [ $b -lt $COLUMNS_R ]; do # for right columns
			while [ $c -lt $COLUMNS_L ]; do # for left columns
				temptemp=$(((${array1[$i]}*${array2[$h]}))) # multiplies appropriate values in each array and stores them
				temp=$((temp+temptemp)) # adds all stored values together
				h=$((h+1)) # iterates SMV
				i=$((i+1)) # iterates FMV
				c=$((c+1)) # loops FMC
			done
			echo -ne "$temp" # prints multiplied + added value for row
			if ! [ $b = $((COLUMNS_R-1)) ]; then # if NOT last one...
				echo -ne "\t" # tab
			fi 
			temp=0 # clears temp
			i=$default # sets FMV to placeholder
			c=0 # clears FMC
			b=$((b+1)) # loops SMC
		done
		b=0 # clears SMC
		h=0 # clears SMV
		a=$((a+1)) # iterates FMR
		i=$((COLUMNS_L*a)) # skips FMV to next row
		default=$i # default stores value of FMV
		echo -ne "\n"
	done
	return 0	
}

$1 "${@:2}" # pumps in command line args to functions
