#!/bin/bash

###############################################################################
# Begin helper functions
#   dims() - lists dimentions of a given matrix
#   transpose() - transposes a given matrix
#   mean() - gives the mean of a given matrix
#   add() - adds two given matrices
#   multiply() - multiplies two given matrices
###############################################################################

dims(){
	#NAME
		# dims - lists dimensions of matrix
	#SYNOPSIS
		# outputs rows and columns of matrix
	#DESCRIPTION
		# after checking for valid input, rows then columns are printed
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX=$1
	USING_FILE=0
	if [ -n "$2" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	elif [ -e "$MATRIX" ]; then # if file exits...
		USING_FILE=1
		if ! [ -f "$MATRIX" ] || ! [ -r "$MATRIX" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad File"
			exit 1	
		fi	
	elif ! [ -e "$MATRIX" ] && [ -n "$1" ]; then
		>&2 echo "ERROR: File Doesn't Exist"
		exit 1
	fi

	if ! [ "$USING_FILE" -eq "1" ]; then
		echo "$(</dev/stdin)" > temporaryfile12324 # moves stdin to temp file with unique name
		ROWS=($(wc --lines < "./temporaryfile12324")) # gets number of rows
		COLUMNS=$((($(wc --words < "./temporaryfile12324"))/ROWS)) #gets number of words/number of rows
		echo "$ROWS $COLUMNS"
		rm temporaryfile12324	
	else
		ROWS=($(wc --lines < "$MATRIX")) # gets number of rows
		COLUMNS=$((($(wc --words < "$MATRIX"))/ROWS)) #gets number of words/number of rows	
		echo "$ROWS $COLUMNS"
	fi
	return 0
}

transpose(){
	#NAME
		# transpose - inverses matrix
	#SYNOPSIS
		# x changes to y and y to x
	#DESCRIPTION
		# The rows and columns will switch, the data will remain unchanged
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX=$1
	USING_FILE=0
	if [ -n "$2" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	elif [ -e "$MATRIX" ]; then # if file exits...
		USING_FILE=1
		if ! [ -f "$MATRIX" ] || ! [ -r "$MATRIX" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad File"
			exit 1	
		fi	
	elif ! [ -e "$MATRIX" ] && [ -n "$1" ]; then
		>&2 echo "ERROR: File Doesn't Exist"
		exit 1
	fi

	if ! [ "$USING_FILE" -eq "1" ]; then
		echo "$(</dev/stdin)" > temporaryfile12324 # moves stdin to temp file with unique name
		ROWS=($(wc --lines < "./temporaryfile12324")) # gets number of rows
		COLUMNS=$((($(wc --words < "./temporaryfile12324"))/ROWS)) #gets number of words/number of rows
		i=0
		j=0
		h=0
		totalcount=0
		declare -a myarray
		read -d EOF -ra myarray < ./temporaryfile12324
		while [ $i -lt $COLUMNS ]; do #for rows
			while [ $j -lt $ROWS ]; do #for columns
				echo -ne "${myarray[$h]}" #print array[i]
				j=$((j+1))
				h=$((h+COLUMNS))
				if ! [ $j = $((ROWS)) ]; then
					echo -ne "\t" #tab
				fi		
			done
			j=0
			i=$((i+1))
			h=$i
			echo -ne "\n" #newline
		done		
		rm temporaryfile12324	
	else
		ROWS=($(wc --lines < "$MATRIX")) # gets number of rows
		COLUMNS=$((($(wc --words < "$MATRIX"))/ROWS)) #gets number of words/number of rows	
		COLUMNS=$((COLUMNS))
		ROWS=$((ROWS))
		i=0
		j=0
		h=0
		totalcount=0
		declare -a myarray
		read -d EOF -ra myarray < $MATRIX
		while [ $i -lt $COLUMNS ]; do #for columns
			while [ $j -lt $ROWS ]; do #for rows
				echo -ne "${myarray[$h]}"	#print array[i]
				j=$((j+1))
				h=$((h+COLUMNS))
				if ! [ $j = $((ROWS)) ]; then
					echo -ne "\t" #tab
				fi		
			done
			j=0
			i=$((i+1))
			h=$i
			echo -ne "\n" #newline
		done
	fi	
	return 0
}

mean(){
	#NAME
		# mean - finds average of matrix
	#SYNOPSIS
		# average in a matrix will be printed
	#DESCRIPTION
		# all numbers will be added then divided by the total input
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX=$1
	USING_FILE=0
	if [ -n "$2" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	elif [ -e "$MATRIX" ]; then # if file exits...
		USING_FILE=1
		if ! [ -f "$MATRIX" ] || ! [ -r "$MATRIX" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad File"
			exit 1	
		fi	
	elif ! [ -e "$MATRIX" ] && [ -n "$1" ]; then
		>&2 echo "ERROR: File Doesn't Exist"
		exit 1
	fi
	avg=0
	if ! [ "$USING_FILE" -eq "1" ]; then #STDIN
		echo "$(</dev/stdin)" > temporaryfile12324 # moves stdin to temp file with unique name
		ROWS=($(wc --lines < "./temporaryfile12324")) # gets number of rows
		COLUMNS=$((($(wc --words < "./temporaryfile12324"))/ROWS)) #gets number of words/number of rows
		i=0
		j=0
		h=0
		totalcount=0
		declare -a myarray
		read -d EOF -ra myarray < ./temporaryfile12324
		while [ $i -lt $COLUMNS ]; do #for columns
			while [ $j -lt $ROWS ]; do #for rows
				arrayval=${myarray[$h]}
				avg=$((avg+arrayval))
				j=$((j+1))
				h=$((h+COLUMNS))	
			done
			j=0
			i=$((i+1))
			h=$i
			if [ $avg -lt 0 ]; then	
				avg=$((((avg-((ROWS/2))))/ROWS))
			elif [ $avg -gt 0 ]; then 
				avg=$((((avg+((ROWS/2))))/ROWS))
			fi
			echo -n "$avg" 
			if ! [ $i = $COLUMNS ]; then
				echo -ne "\t"
			fi
			avg=0
		done
		#echo -ne "\n"	
		rm temporaryfile12324	
	else #FILE INPUT
		ROWS=($(wc --lines < "$MATRIX")) # gets number of rows
		COLUMNS=$((($(wc --words < "$MATRIX"))/ROWS)) #gets number of words/number of rows	
		COLUMNS=$((COLUMNS))
		ROWS=$((ROWS))
		i=0
		j=0
		h=0
		totalcount=0
		declare -a myarray
		read -d EOF -ra myarray < $MATRIX
		while [ $i -lt $COLUMNS ]; do #for columns
			while [ $j -lt $ROWS ]; do #for rows
				arrayval=${myarray[$h]}
				avg=$((avg+arrayval))
				j=$((j+1))
				h=$((h+COLUMNS))	
			done
			j=0
			i=$((i+1))
			h=$i
			if [ $avg -lt 0 ]; then	
				avg=$((((avg-((ROWS/2))))/ROWS))
			elif [ $avg -gt 0 ]; then 
				avg=$((((avg+((ROWS/2))))/ROWS))
			fi
			echo -n "$avg"
			if ! [ $i = $COLUMNS ]; then
				echo -ne "\t"
			fi
			avg=0
		done
		#echo -ne "\n"
	fi
	return 0
}

add(){
	#NAME
		# add - adds matrix
	#SYNOPSIS
		# 2 arrays will be added
	#DESCRIPTION
		# 2 arrays will be added if they are able to be
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX_LEFT=$1
	MATRIX_RIGHT=$2
	if [ -z "$MATRIX_LEFT"  ] || [ -z "$MATRIX_RIGHT"  ] || [ -n "$3" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	fi
	if [ -e "$MATRIX_LEFT" ]; then # if file exits...
		if ! [ -f "$MATRIX_LEFT" ]  || ! [ -r "$MATRIX_LEFT" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad 1st File"
			exit 1	
		fi
	else 
		>&2 echo "ERROR: 1st File Doesn't Exist"
		exit 1		
	fi	
	if [ -e "$MATRIX_RIGHT" ]; then # if file exits...
		if ! [ -f "$MATRIX_RIGHT" ]  || ! [ -r "$MATRIX_RIGHT" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad 2nd File"
			exit 1
		fi
	else 
		>&2 echo "ERROR: 2nd File Doesn't Exist"
		exit 1				
	fi
	#make sure columns and rows are equal (dim1=dim2)
	ROWS_L=($(wc --lines < "$MATRIX_LEFT")) # gets number of rows
	COLUMNS_L=$((($(wc --words < "$MATRIX_LEFT"))/ROWS_L)) #gets number of words/number of rows
	ROWS_R=($(wc --lines < "$MATRIX_RIGHT")) # gets number of rows
	COLUMNS_R=$((($(wc --words < "$MATRIX_RIGHT"))/ROWS_R)) #gets number of words/number of rows
	
	if ! [ "$ROWS_L" -eq "$ROWS_R" ] || ! [ "$COLUMNS_L" -eq "$COLUMNS_R" ]; then
		>&2 echo "ERROR: Matrices Are Incompatible"
		exit 1
	fi	
	return 0	
}

multiply(){
	#NAME
		# multiply - multiplies matrix
	#SYNOPSIS
		# 2 arrays will be multiplied
	#DESCRIPTION
		# 2 arrays will be multiplied if they are able to be
	#AUTHOR
		# Written by Ryan Sisco (siscor@oregonstate.edu)

	MATRIX_LEFT=$1
	MATRIX_RIGHT=$2
	if [ -z "$MATRIX_LEFT"  ] || [ -z "$MATRIX_RIGHT"  ] || [ -n "$3" ]; then # command-line-arg format validation
		>&2 echo "ERROR: Invalid Arguments"
		exit 1
	fi
	if [ -e "$MATRIX_LEFT" ]; then # if file exits...
		if ! [ -f "$MATRIX_LEFT" ]   || ! [ -r "$MATRIX_LEFT" ]; then # and it's not regular or readable....
			>&2 echo "ERROR: Bad 1st File"
			exit 1	
		fi
	else 
		>&2 echo "ERROR: 1st File Doesn't Exist"
		exit 1		
	fi	
	if [ -e "$MATRIX_RIGHT" ]; then # if file exits...
		if ! [ -f "$MATRIX_RIGHT" ]  || ! [ -r "$MATRIX_RIGHT" ]; then # and it's not regular or readable...
			>&2 echo "ERROR: Bad 2nd File"
			exit 1
		fi
	else 
		>&2 echo "ERROR: 2nd File Doesn't Exist"
		exit 1				
	fi
	#make sure columns and rows are equal (dim1=dim2)
	ROWS_L=($(wc --lines < "$MATRIX_LEFT")) # gets number of rows
	COLUMNS_L=$((($(wc --words < "$MATRIX_LEFT"))/ROWS_L)) #gets number of words/number of rows
	ROWS_R=($(wc --lines < "$MATRIX_RIGHT")) # gets number of rows
	COLUMNS_R=$((($(wc --words < "$MATRIX_RIGHT"))/ROWS_R)) #gets number of words/number of rows
	
	if ! [ "$ROWS_L" -eq "$COLUMNS_R" ] || ! [ "$COLUMNS_L" -eq "$ROWS_R" ]; then
		>&2 echo "ERROR: Matrices Are Incompatible"
		exit 1
	fi	
	return 0	
}

$1 "${@:2}"
